import groovy.swing.SwingBuilder

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

version = "3.1"
group = "com.github.terminatornl.tickcentral" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TickCentral"

def taskNames = project.gradle.startParameter.taskNames
if(!taskNames.contains("sign")){
    version = "$version-testing"
}
if (taskNames.contains("jar") || taskNames.find {it.toLowerCase().startsWith("publish")}) {
    version = "$version-dev"
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

task installToObfServer << {
    delete fileTree('run_server_obf/mods') {
        include "$archivesBaseName*"
    }
    println("Copying " + jar.archivePath + " into run_server_obf/mods")
    copy {
        from jar.archivePath
        into "run_server_obf/mods"
    }
}

task sign << {

}

jar {
    manifest {
        attributes([
                "Specification-Title": "examplemod",
                "Specification-Vendor": "examplemodsareus",
                "Specification-Version": "${version}", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLCorePlugin': 'com.github.terminatornl.tickcentral.TickCentral'
        ])
    }
}

/*
task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.gradle.startParameter.taskNames.contains("sign")
    }
    if (project.gradle.startParameter.taskNames.contains("sign")) {


        String password

        if (password == null) {
            if (System.console() != null) {
                password = new String(System.console().readPassword("Keystore password"))
            } else {
                new SwingBuilder().edt {
                    dialog(modal: true,
                            title: 'Keystore password',
                            alwaysOnTop: true,
                            resizable: false,
                            locationRelativeTo: null,
                            pack: true,
                            show: true
                    ) {
                        vbox {
                            label(text: "                                                ")
                            input = passwordField()
                            button(defaultButton: true, text: 'OK', actionPerformed: {
                                password = new String(input.password);
                                dispose();
                            })
                        }
                    }
                }
            }
        }

        if (password == null || password.size() < 1) {
            throw new GradleException("No password supplied")
        }

        alias = "TerminatorNL"
        keyStore = "keystore.jks"
        storePass = password
        keyPass = password

        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}
*/
installToObfServer.dependsOn build
//build.dependsOn signJar

publishing { // for the publishToMavenLocal task
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}
