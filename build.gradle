import groovy.swing.SwingBuilder
import net.minecraftforge.gradle.common.task.SignJar
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

//Fricking heck! I have to manually update the file too!
version = "3.1"
group = "com.github.terminatornl.tickcentral" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TickCentral"

def taskNames = project.gradle.startParameter.taskNames
if (taskNames.contains("jar") || taskNames.find {it.toLowerCase().startsWith("publish")}) {
    version = "$version-dev"
}

String password
if (taskNames.contains("build") || taskNames.contains("install")){
    if (System.console() != null) {
        password = new String(System.console().readPassword("Keystore password"))
    } else {
        new SwingBuilder().edt {
            dialog(modal: true,
                    title: 'Keystore password',
                    alwaysOnTop: true,
                    resizable: false,
                    locationRelativeTo: null,
                    pack: true,
                    show: true
            ) {
                vbox {
                    label(text: "                                                ")
                    input = passwordField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        password = new String(input.password);
                        dispose();
                    })
                }
            }
        }

        if (password == null || password.size() == 0) {
            //throw new GradleException("No password supplied")
            version = "$version-unsigned"
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'
}

processResources {
    expand project.properties
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

task installToObfServer << {
    delete fileTree('run_server_obf/mods') {
        include "$archivesBaseName*"
    }
    println("Copying " + jar.archivePath + " into run_server_obf/mods")
    copy {
        from jar.archivePath
        into "run_server_obf/mods"
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": project.name,
                "Specification-Vendor": "Terminator_NL",
                "Specification-Version": "${version}", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Terminator_NL",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLCorePlugin': 'com.github.terminatornl.tickcentral.TickCentral'
        ])
    }
}

task signJar(type: SignJar, dependsOn: jar) {
    keyStore = "keystore.jks"
    alias = "TerminatorNL"
    storePass = password
    keyPass = password
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

if (password != null && password.size() > 0) {
    build.dependsOn signJar
}

installToObfServer.dependsOn build

build.dependsOn processResources
//build.dependsOn signJar